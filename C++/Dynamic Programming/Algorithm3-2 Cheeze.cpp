/*
N * N개의 칸이 있는 테이블이 있고, 치즈 몇 개가 테이블에 놓여있다. 치즈를 좋아하
는 생쥐 미키는 테이블의 (1,1)에서 출발해서 (N,N)에 도착할 때까지 많은 치즈를 먹고
싶어한다. 하지만 머리가 나쁜 미키는 위로 올라가거나 오른쪽으로만 이동할 수 있다.
예를 들어, 아래 그림에서 미키는 5개의 치즈 중 최대 3개의 치즈만 먹으며 이동할 수
있다
테이블 크기 N과 M개의 치즈 위치가 주어졌을 때 최대로 먹을 수 있는 치즈의 개수
를 구하는 프로그램을 작성하시오. 치즈의 위치는 (x,y)의 좌표로 주어지며 왼쪽 아래
구석의 위치를 (1,1)로, 맨 오른쪽 위 구석의 위치를 (N,N)으로 한다.
입력
입력은 표준입력(standard input; 키보드를 통한 입력)을 사용한다. 입력은 첫 줄에 자
연수 N과 M이 주어진다. 이 때, N과 M은 1 이상 10000 이하의 범위이다. 다음 M개의
줄에 각각의 치즈의 위치 x와 y가 주어진다.
출력
출력은 표준출력(standard output; 모니터 화면에 출력)을 사용한다. 주어진 입력에 대
해 최대로 먹을 수 있는 치즈의 개수를 정수 형태로 출력한다
입력 예 
5 5
2 3
3 2
4 3
4 5
5 2
입력 예에 대한 출력
3
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;



int arr2[10001][10001] = { 0, };
int cheeze[10001][10001];





int main()
{
	int N, M;//N = N*N 테이블, M = 치즈개수
	scanf_s("%d %d", &N, &M);
	int x, y;
	for (int i = 0; i < M; i++) {
		scanf_s("%d %d", &x, &y);
		cheeze[x][y] = 1;
	}

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
				arr2[i][j] = max(arr2[i - 1][j], arr2[i][j - 1])+cheeze[i][j];
			
		}
	}
	
	
	printf("%d", arr2[M][M]);
	
	

}

